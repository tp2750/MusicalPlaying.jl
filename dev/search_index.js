var documenterSearchIndex = {"docs":
[{"location":"notes/","page":"Notes","title":"Notes","text":"CurrentModule = MusicalPlaying","category":"page"},{"location":"notes/#Notes","page":"Notes","title":"Notes","text":"","category":"section"},{"location":"notes/","page":"Notes","title":"Notes","text":"A Note is a type meant to encode the abstract note:","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"pitch::Int: the height of the tone\nloudness::Float32: the volume of the tone\nduration::Float32: the length of the tone","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"The pitch is just an integer, and not a frequency. The frequency is assigned by a TuningSystem. This means that the same melody (series of notes) can easily be analyzed in different tunings by changing the tuning.","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"We also define a Chord which is a vector of notes, that all have the same duration, but may differ in loudness.","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"We define an AbstractNote covering Note and Chord, and define play and save methods on the AbstractNote. ","category":"page"},{"location":"notes/#Playing-Notes","page":"Notes","title":"Playing Notes","text":"","category":"section"},{"location":"notes/","page":"Notes","title":"Notes","text":"We have methods for directly playing notes: play_wav_direct.  This will take:","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"a Note and play the note using a standard equal temperemt\na Chord and play the chord\na Vector{N} where N <: AbstractNote and play a sequence of Notes or Chords","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"Here are some examples:","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"using MusicalPlaying\nplay_wav_direct(\"A\")\nplay_wav_direct(chord([\"C\", \"E\", \"G\"]))\nplay_wav_direct(note.([\"C\", \"E\", \"G\"]))\nplay_wav_direct([chord([\"C\", \"E\", \"G\"]), chord([\"F\",\"A\",\"C\"]), chord([\"G\", \"B\", \"D\"]), chord([\"C\", \"E\", \"G\"])])","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"The play_wav_direct methods work by writeing and reading a WAV-file.  We (will also) have play_portaudio methods that use PortAudio.jl and SampleSignals.jl to play a stream.  This is more efficient for long pieces. But the play_wav_diret is simple and very robust for studiyng short phrases.","category":"page"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = MusicalPlaying","category":"page"},{"location":"api/#MusicalPlaying","page":"API","title":"MusicalPlaying","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"API documentation for MusicalPlaying.","category":"page"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [MusicalPlaying]","category":"page"},{"location":"api/#MusicalPlaying.AbstractNote","page":"API","title":"MusicalPlaying.AbstractNote","text":"    AbstractNote covers Note and Chord\n\n\n\n\n\n","category":"type"},{"location":"api/#MusicalPlaying.Note","page":"API","title":"MusicalPlaying.Note","text":"    `Note(pitch::Int, duration::Float32, volume::Float32)`\n    `pitch` is the pitch number. MIDI sets pitch 69 to A4 and 440 Hz. This can be modulated by a Tuning.\n    `loudness` is relative volume. A note of loudness 2 has twice the amplitued as one of loudness 1.\n    `duration` is the duration in beats. Typically a quater note has a duration of 1, and a half note a duration of 2.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = MusicalPlaying","category":"page"},{"location":"#MusicalPlaying.jl","page":"Home","title":"MusicalPlaying.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MusicalPlaying is my Julia package for playing (with) music.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It grew out of TuningSystems.jl presented on JuliaCon2024 to have a more complete and better structured package.  It has some overlap with MusicTheory.jl and MIDI.jl from JuliaMusic.  In time, this may be resolved, but for now, I focus on writing the package, as I find most logical.","category":"page"},{"location":"","page":"Home","title":"Home","text":"I plan to cover:","category":"page"},{"location":"","page":"Home","title":"Home","text":"[X] Playing simple notes, chords and melodies.\n[ ] Explore different Tuning Systems, in particular Just Intonation\n[ ] Represent Scores of several voices\n[ ] Use DataFrames to view Scores as in a Tracker\n[ ] Plot notes, chords and scores in an \"isometric\" form more natural that the classical scores\n[ ] Possibly generate traditional Piano-roll plots\n[ ] Define basic types to represent note, tone, sound\n[ ] Explore sound synthesis\n[ ] Act as a very simple MIDI player\n[ ] Parse (simple) Lilypond syntax","category":"page"},{"location":"","page":"Home","title":"Home","text":"On the synthesis side, I want to keep working on functions as long as possible, and only sample just before rendering to WAV.","category":"page"},{"location":"#Basic-Data-Types","page":"Home","title":"Basic Data Types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The basic data sctructures are similar, but different from both MIDI.jl and MusicTheory.jl.","category":"page"},{"location":"#Note","page":"Home","title":"Note","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The Note data type descries an abstract note, as we see in a score:","category":"page"},{"location":"","page":"Home","title":"Home","text":"The \"pictch\": note height. An integer between 0 and 127 as the MIDI note. Not directly a frequency, we get that through the \"TunigSystem\".\nThe \"loudness\": relative volume. Not directly amplitude. That comes in a mastering step just before sampling. Defaults to 1. Perhaps \"forte\" is 2 and \"piano\" as 0.5.\nThe \"duration\": relative note length. 1 is a \"beat\", so a duration of 1 sounds for 1 sec if the tempo is 60 bpm. Typically, a auarter note has a dutration of 1, and a half note a duration of 2.","category":"page"},{"location":"#Chord","page":"Home","title":"Chord","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"a Chord is a sequence (Vector) of Notes with the same duration (but possibly different loudness) that are played together at the same time.","category":"page"},{"location":"#AbstractNote","page":"Home","title":"AbstractNote","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Note and Chord are the instances of AbstractNote.","category":"page"},{"location":"#Melody-(TODO)","page":"Home","title":"Melody (TODO)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Melody is a sequence (Vector) of Notes and Chords that are played in succession.","category":"page"},{"location":"#Tone-(TODO)","page":"Home","title":"Tone (TODO)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The tone combines a Note or Chrod with a Tuning to assign frequency to the pitch. This was the objective of TuningSystems.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The slots of Tone are","category":"page"},{"location":"","page":"Home","title":"Home","text":"frequency: The frequency in Hz.\nnote: remember the AbstractNote this comes from\ntuning: rember the Tuning used","category":"page"}]
}
