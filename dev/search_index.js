var documenterSearchIndex = {"docs":
[{"location":"notes/#Notes","page":"Notes","title":"Notes","text":"","category":"section"},{"location":"notes/","page":"Notes","title":"Notes","text":"A Note is a type meant to encode the abstract note:","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"pitch::Int: the height of the tone\nloudness::Float32: the volume of the tone\nduration::Float32: the length of the tone","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"The pitch is just an integer, and not a frequency. The frequency is assigned by a TuningSystem. This means that the same melody (series of notes) can easily be analyzed in different tunings by changing the tuning.","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"We also define a Chord which is a vector of notes, that all have the same duration, but may differ in loudness.","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"We define an AbstractNote covering Note and Chord, and define play and save methods on the AbstractNote. ","category":"page"},{"location":"notes/#Playing-Notes","page":"Notes","title":"Playing Notes","text":"","category":"section"},{"location":"notes/","page":"Notes","title":"Notes","text":"We have methods for directly playing notes: play_wav_direct.  This will take:","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"a Note and play the note using a standard equal temperemt\na Chord and play the chord\na Vector{N} where N <: AbstractNote and play a sequence of Notes or Chords","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"Here are some examples:","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"using MusicalPlaying\nplay_wav_direct(\"A\")\nplay_wav_direct(chord([\"C\", \"E\", \"G\"]))\nplay_wav_direct(note.([\"C\", \"E\", \"G\"]))\nplay_wav_direct([chord([\"C\", \"E\", \"G\"]), chord([\"F\",\"A\",\"C\"]), chord([\"G\", \"B\", \"D\"]), chord([\"C\", \"E\", \"G\"])])","category":"page"},{"location":"notes/","page":"Notes","title":"Notes","text":"The play_wav_direct methods work by writeing and reading a WAV-file.  We (will also) have play_portaudio methods that use PortAudio.jl and SampleSignals.jl to play a stream.  This is more efficient for long pieces. But the play_wav_diret is simple and very robust for studiyng short phrases.","category":"page"},{"location":"api/#MusicalPlaying","page":"API","title":"MusicalPlaying","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"API documentation for MusicalPlaying.","category":"page"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/#MusicalPlaying.sine","page":"API","title":"MusicalPlaying.sine","text":"sine is an instrument with a sine wave extended to always end at 0 value (no discontinuities)\n\n\n\n\n\n","category":"constant"},{"location":"api/#MusicalPlaying.AbstractNote","page":"API","title":"MusicalPlaying.AbstractNote","text":"    AbstractNote covers Note and Chord\n\n\n\n\n\n","category":"type"},{"location":"api/#MusicalPlaying.Note","page":"API","title":"MusicalPlaying.Note","text":"    `Note(pitch::Int, duration::Float32, volume::Float32)`\n    `pitch` is the pitch number. MIDI sets pitch 69 to A4 and 440 Hz. This can be modulated by a Tuning.\n    `loudness` is relative volume. A note of loudness 2 has twice the amplitued as one of loudness 1.\n    `duration` is the duration in beats. Typically a quater note has a duration of 1, and a half note a duration of 2.\n\n\n\n\n\n","category":"type"},{"location":"api/#MusicalPlaying.TuningSystem","page":"API","title":"MusicalPlaying.TuningSystem","text":"TuningSystem{T}\n\nData structure for a tuning system. A tuning system is defined by a vector of scalings of the type T (probably <: Number). The scalings are frequency rations within the octave of the pitches of the tones in the octave. It also includes names of each scaling. In case of the 12 tone equal temperement, it could be the names of the notes: C, C#, D, D#, E, ..., B. It also includes a name of the tuning (used for plotting etc).\n\nPreferably use the constructor function tuning_system to construct it.\n\n\n\n\n\n","category":"type"},{"location":"api/#MusicalPlaying.ar_generator-Tuple{Function}","page":"API","title":"MusicalPlaying.ar_generator","text":"ar_generator    Attack-Release generator: takes a 1-periodic function being zero in 0 and in 1 and applying an attack, release envelope.    Simplified version of ADSR with D=0 and S=1.    Resurns an instrument funciton, ie a function takin Tone, tempo (bpm) and start time, and return a Sound struct playing the tone in that tempo starting at the start time.\n\n\n\n\n\n","category":"method"},{"location":"api/#MusicalPlaying.equal_tempered-Tuple{Any}","page":"API","title":"MusicalPlaying.equal_tempered","text":"equal_tempered(n)\n\nConstructs an equal tempered tuning of length n.\n\nIf the length n is 12, the names of the scalings are set to the standard names of the notes: \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\".\n\nThe scalings of and equal tempered scale of length n divides the octave evenly on a log scale. This means the ratio between successive scalings are 2^(1/n).\n\nSo the vector of scalings is:\n\n    scalings = [(2^(1/n))^x for x in 0:(n-1)]\n\n\n\n\n\n","category":"method"},{"location":"api/#MusicalPlaying.mk_tuning-Tuple{MusicalPlaying.TuningSystem}","page":"API","title":"MusicalPlaying.mk_tuning","text":"mk_tuning: Generate Tuning based on TuningSystem\n\n\n\n\n\n","category":"method"},{"location":"api/#MusicalPlaying.tuning_system-Union{Tuple{T}, Tuple{Int64, Vector{T}, String, Vector{String}}} where T<:Number","page":"API","title":"MusicalPlaying.tuning_system","text":" tuning_system(v::Vector{T}, [n::String], [s::Vector{String}]) where T <: Number -> TuningSystem\n\nConstruct a TuningSystem.\n\nArguments\n\nv::Vector: The vector of scaings defining the function.\nn::String: The name of the tuning system. Defaults to \"tuning\"\ns::Vector{String}: The names of the scalings. Defaults to string.v()\n\n\n\n\n\n","category":"method"},{"location":"sounds/#Sounds","page":"Sounds","title":"Sounds","text":"","category":"section"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"A sound is a function and a duration it sould be played. When playing a sound, the function is sampled to generate a sound of the required length.","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"We can get a sound, from a note through this path:","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"Note + Tuning -> Tone\nTone + Instrument -> Sound","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"So the Note encodes the abstract musical information about pich, duration and loudness. The Tuning turns this into frequency. The instrument describes how to actually render the tone: it is a function takin a tone (including duration), tempo (bpm) and a starting time, and returns a function that can be sampled over the time interval","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"The simples instrument is just a sine function, but with an envelope extending the playing to it reaches 0.","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"That instrument is caled sine.","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"using MusicalPlaying\nn1 = note(\"C\")\nt1 = tone(n1, tuning = tet12)\ns1 = sound(t1, sine)\nplay_wav(s1)","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"Playing a short melody:","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"using MusicalPlaying\nm2 = Melody([note(\"C\"), note(\"E\"), note(\"G\")])\ns2 = sound(m2, sine)\nplay_wav(s2)","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"How does the samples look?","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"using MusicalPlaying\nn1 = note(\"A\")\nt1 = tone(n1, tuning = tet12)\ns1 = sound(t1, sine)\ns2 = MusicalPlaying.sample(s1)\nplot(s2[1:100])\nplot(s2[end-100:end])\nlength(s2) # 44201\ns1.seconds # 1.0022727","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"I we use the simple sin() function it would not end at zero, but it respects the 1s tone length.","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"julia> plot(plot(MusicalPlaying.sample_wav_direct(note(\"C\"))[43900:end]), plot(MusicalPlaying.sample(sound(tone(note(\"C\")),sine))[43900:end]), link=:both, layout=(2,1), label=[\"sin\" \"sine\"])","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"(Image: sin vs sine)","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"We can hear that we do not get the \"click\" between the tones when comparing:","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"using MusicalPlaying\nm2 = Melody([note(\"C\"), note(\"E\"), note(\"G\")])\ns2 = sound(m2, sine)\nplay_wav(s2)","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"to ","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"\nusing MusicalPlaying\nplay_wav_direct(note.([\"C\", \"E\", \"G\"]))","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"We can also see it: the simple sin function is discontinuous at the change between the tones (index 200).","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"using MusicalPlaying\ns1 = MusicalPlaying.sample(sound(Melody([note(\"C\"), note(\"E\"), note(\"G\")]),sine))\ns2 = vcat(MusicalPlaying.sample_wav_direct(Melody(note.([\"C\", \"E\", \"G\"])))...)\nlength(s1) # 132_301\nlength(s2) # 132_300\njulia> plot(plot(s1[43900:44200]), plot(s2[43900:44200]), link=:both, layout=(2,1))","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"(Image: Tone transition)","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"We could improve the sine by delaying the onset of the next tone, to the first has ended.","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"This gets complicated.  A simpler solution is to use an ADSR envelope.","category":"page"},{"location":"sounds/#Sound-functions","page":"Sounds","title":"Sound functions","text":"","category":"section"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"We delay the sampling of the functions as much as possible.","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"The sound functions generated from the tones are multipleid by the envelope to only sound in the time interval specified.","category":"page"},{"location":"sounds/#Chords","page":"Sounds","title":"Chords","text":"","category":"section"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"using MusicalPlaying\nc1 = chord([\"C\", \"E\", \"G\"])\nc2 = chord([\"F\", \"A\", \"C\"])\nc3 = chord([\"G\", \"B\", \"D\"])\nm3 = Melody([c1, c2, c3, c1])\ns3 = sound(m3, sine)\nplay_wav(s3)","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"It is a bit better than not much better than","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"m4 = Melody([chord([\"C\", \"E\", \"G\"]), chord([\"F\",\"A\",\"C\"]), chord([\"G\", \"B\", \"D\"]), chord([\"C\", \"E\", \"G\"])])\nplay_wav_direct(m4)","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"Plotting:","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"range = 43900:44200\np1 = plot(MusicalPlaying.sample(s3)[range])\np2 = plot(vcat(MusicalPlaying.sample_wav_direct(m4)...)[range])\nplot(p1, p2, link=:both, layout=(2,1), label = [\"sine\" \"sin\"])","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"(Image: Comparing Chords)","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"Taking a bit more context the difference is small (it is at index 1200):","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"range = 42900:44200\np1 = plot(MusicalPlaying.sample(s3)[range])\np2 = plot(vcat(MusicalPlaying.sample_wav_direct(m4)...)[range])\nplot(p1, p2, link=:both, layout=(2,1), label = [\"sine\" \"sin\"])","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"(Image: Comparing Chords)","category":"page"},{"location":"sounds/#Using-an-envelope","page":"Sounds","title":"Using an envelope","text":"","category":"section"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"The function _sin_ar is a generator function that can generate sine functions with attack and release envelope. Using just 5 ms attack and release is enough","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"using MusicalPlaying\nsinear = MusicalPlaying.Instrument(((t,b,s) -> MusicalPlaying._sine_ar(t,b,s, attack=0.005, release = 0.005)))\nc1 = chord([\"C\", \"E\", \"G\"])\nc2 = chord([\"F\", \"A\", \"C\"])\nc3 = chord([\"G\", \"B\", \"D\"])\nm3 = Melody([c1, c2, c3, c1])\ns3 = sound(m3, sinear)\nplay_wav(s3)","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"This give a nice smooth transition, but also makes the notes fall a little bit (50 ms) behind.","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"The 50 ms is 44100*0.005 = 220 samples, so let's look at the first 3000 samples:","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"julia> plot(MusicalPlaying.sample(s3)[1:1000], label = \"sin_ar\")","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"(Image: Start of sound)","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"We can also look at the change of chords:","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"range = (-1000:1000) .+ 44100\nplot(MusicalPlaying.sample(s3)[range], label = \"sin_ar\")","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"We export that with the name sine_ar.","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"using MusicalPlaying\nc1 = chord([\"C\", \"E\", \"G\"])\nc2 = chord([\"F\", \"A\", \"C\"])\nc3 = chord([\"G\", \"B\", \"D\"])\nm3 = Melody([c1, c2, c3, c1])\ns4 = sound(m3, sine_ar)\nplay_wav(s4)\nrange = (-1000:1000) .+ 44100\nplot(MusicalPlaying.sample(s4)[range], label = \"sin_ar\")","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"The transition is at index 1000.","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"(Image: Chord transition)","category":"page"},{"location":"sounds/#Other-oscillators","page":"Sounds","title":"Other oscillators","text":"","category":"section"},{"location":"sounds/#Square-ocillator","page":"Sounds","title":"Square ocillator","text":"","category":"section"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"We use the ar_generator[@REF] function to generate a square instrument function:","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"square1_ar = Instrument(ar_generator(square1, attack = 0.005, release = 0.005))","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"using MusicalPlaying\nc1 = chord([\"C\", \"E\", \"G\"])\nc2 = chord([\"F\", \"A\", \"C\"])\nc3 = chord([\"G\", \"B\", \"D\"])\nm3 = Melody([c1, c2, c3, c1])\ns5 = sound(m3, MusicalPlaying.square1_ar)\nplay_wav(s5)\nrange = (-1000:1000) .+ 44100\nplot(MusicalPlaying.sample(s5)[range], label = \"square1_ar\")","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"(Image: Square chord)","category":"page"},{"location":"sounds/#Saw-ocillator","page":"Sounds","title":"Saw ocillator","text":"","category":"section"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"We use the ar_generator[@REF] function to generate a square instrument function:","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"saw1_ar = Instrument(ar_generator(saw1, attack = 0.005, release = 0.005))","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"using MusicalPlaying\nc1 = chord([\"C\", \"E\", \"G\"])\nc2 = chord([\"F\", \"A\", \"C\"])\nc3 = chord([\"G\", \"B\", \"D\"])\nm3 = Melody([c1, c2, c3, c1])\ns6 = sound(m3, MusicalPlaying.saw1_ar)\nplay_wav(s6)\nrange = (-1000:1000) .+ 44100\nplot(MusicalPlaying.sample(s6)[range], label = \"saw1_ar\")","category":"page"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"(Image: Saw chord)","category":"page"},{"location":"sounds/#The-oscillators","page":"Sounds","title":"The oscillators","text":"","category":"section"},{"location":"sounds/","page":"Sounds","title":"Sounds","text":"(Image: The oscillators)","category":"page"},{"location":"#MusicalPlaying.jl","page":"Home","title":"MusicalPlaying.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MusicalPlaying is my Julia package for playing (with) music.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It grew out of TuningSystems.jl presented on JuliaCon2024 to have a more complete and better structured package.  It has some overlap with MusicTheory.jl and MIDI.jl from JuliaMusic.  In time, this may be resolved, but for now, I focus on writing the package, as I find most logical.","category":"page"},{"location":"","page":"Home","title":"Home","text":"I plan to cover:","category":"page"},{"location":"","page":"Home","title":"Home","text":"[X] Playing simple notes, chords and melodies.\n[ ] Explore different Tuning Systems, in particular Just Intonation\n[ ] Represent Scores of several voices\n[ ] Use DataFrames to view Scores as in a Tracker\n[ ] Plot notes, chords and scores in an \"isometric\" form more natural that the classical scores\n[ ] Possibly generate traditional Piano-roll plots\n[ ] Define basic types to represent note, tone, sound\n[ ] Explore sound synthesis\n[ ] Act as a very simple MIDI player\n[ ] Parse (simple) Lilypond syntax","category":"page"},{"location":"","page":"Home","title":"Home","text":"On the synthesis side, I want to keep working on functions as long as possible, and only sample just before rendering to WAV.","category":"page"},{"location":"#Basic-Data-Types","page":"Home","title":"Basic Data Types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The basic data sctructures are similar, but different from both MIDI.jl and MusicTheory.jl.","category":"page"},{"location":"#Note","page":"Home","title":"Note","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The Note data type descries an abstract note, as we see in a score:","category":"page"},{"location":"","page":"Home","title":"Home","text":"The \"pictch\": note height. An integer between 0 and 127 as the MIDI note. Not directly a frequency, we get that through the \"TunigSystem\".\nThe \"loudness\": relative volume. Not directly amplitude. That comes in a mastering step just before sampling. Defaults to 1. Perhaps \"forte\" is 2 and \"piano\" as 0.5.\nThe \"duration\": relative note length. 1 is a \"beat\", so a duration of 1 sounds for 1 sec if the tempo is 60 bpm. Typically, a auarter note has a dutration of 1, and a half note a duration of 2.","category":"page"},{"location":"#Chord","page":"Home","title":"Chord","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"a Chord is a sequence (Vector) of Notes with the same duration (but possibly different loudness) that are played together at the same time.","category":"page"},{"location":"#AbstractNote","page":"Home","title":"AbstractNote","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Note and Chord are the instances of AbstractNote.","category":"page"},{"location":"#Melody","page":"Home","title":"Melody","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Melody is a sequence (Vector) of Notes and Chords that are played in succession.","category":"page"},{"location":"#Tone","page":"Home","title":"Tone","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The tone combines a Note or Chrod with a Tuning to assign frequency to the pitch. This was the objective of TuningSystems.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The slots of Tone are","category":"page"},{"location":"","page":"Home","title":"Home","text":"frequency: The frequency in Hz.\nnote: remember the AbstractNote this comes from\ntuning: remember the Tuning used","category":"page"},{"location":"#Sound","page":"Home","title":"Sound","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A sound is a function that can be sampled.","category":"page"}]
}
